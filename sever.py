from flask import Flask, jsonify, request, session, make_response
from flask_cors import CORS
import logging
import random
from speech_recognition_mine import recognize_speech_from_file
import os
import aiohttp
import asyncio
from dotenv import load_dotenv
from gtts import gTTS
import tempfile
import uuid
import pyttsx3
import io
import base64
import wave
from flask_cors import cross_origin
import json
from flask import render_template
from aiogram import Bot
from bot_instance import bot

async def send_end_call_message(bot: Bot, user_id: int, text: str, duration: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram, 
       —Ä–∞–∑–±–∏–≤–∞—è –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏.
    """
    try:
        MAX_MESSAGE_LENGTH = 4096
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        header_text = f"–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫.\n –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
        available_length = MAX_MESSAGE_LENGTH - len(header_text) 
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ —á–∞—Å—Ç–∏
        text_parts = [text[i:i + available_length] for i in range(0, len(text), available_length)]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, part in enumerate(text_parts):
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
            if i == 0:
                await bot.send_message(user_id, header_text + part) 
            else:
                await bot.send_message(user_id, part)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
    

semaphore = asyncio.Semaphore(50)

load_dotenv()
API_KEY = os.getenv("API_KEY")

def format_conversation(conversation_history: list) -> str:
  """
  –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.

  Args:
    conversation_history: –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç 
                          —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–∞–º–∏ 'role' –∏ 'content'.

  Returns:
    –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞.
  """

  formatted_text = ""

  for message in conversation_history:
    role = message['role']
    content = message['content']

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:" –∏ "–±–æ—Ç-–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:"
    if content.startswith('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:'):
        content = content[len('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:'):]
    elif content.startswith('–±–æ—Ç-–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:'):
        content = content[len('–±–æ—Ç-–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:'):].replace("–±–æ—Ç-–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:", "", 1)

    formatted_text += f"{role}: {content}\n"

  return formatted_text

async def get_response(conversation_history, person_characteristics=None):
    system_message = {
        "role": "system",
        "content": f"""–¢—ã ‚Äî –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ö–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Å—Ç–∏ —Å–µ–±—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫. –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º: –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º, –∑–∞–Ω—è—Ç—ã–º –∏–ª–∏ –¥–∞–∂–µ —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º. –¢—ã –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –¥–∞—Ç—å —Ç–æ–º—É, –∫—Ç–æ –∑–≤–æ–Ω–∏—Ç, –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –æ–Ω —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º, –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –∞ –Ω–µ —Å –º–æ–¥–µ–ª—å—é. –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã—Ä–∞–∂–∞—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è, –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏–ª–∏ –¥–∞–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫. –ü–æ–º–Ω–∏, —á—Ç–æ –ª—é–¥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏, –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –æ—Ç—Ä–∞–∂–∞—Ç—å —ç—Ç–æ –≤ —Ö–æ–¥–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
        –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–µ–ø–ª–∏–∫–∏, –±–µ–∑ –ø–æ–º–µ—Ç–æ–∫, –∫—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç. –£—á—Ç–∏, —Ç—ã –±—É–¥—É—á–∏ –∫–ª–∏–µ–Ω—Ç–æ–º –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–±—Ä–æ—Å–∏—Ç—å –∑–≤–æ–Ω–æ–∫, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ –°–ë–†–û–°.
        –£—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ, —á—Ç–æ —Ç—ã –æ–±–ª–∞–¥–∞–µ—à—å —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {person_characteristics} 
        """
    }
    
    messages = [system_message] + conversation_history
    print(messages)
    async with aiohttp.ClientSession() as session:
        response_json = await send_request(session, messages, temperature=0.7)
        
    if response_json and 'choices' in response_json:
        return response_json['choices'][0]['message']['content']
    else:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    
async def get_report(communication, duration=0, start_call=0):
    system_message = {
        "role": "system",
        "content": f"""–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç—ã –¥–æ–ª–∂–µ–Ω –∏–º–µ–Ω–Ω–æ —Ç–æ, –∫–∞–∫ –æ–±—â–∞–ª—Å—è –°–û–¢–†–£–î–ù–ò–ö:
                –°–Ω–∞—á–∞–ª–∞ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é —É—Å—Ç–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: –æ—Ü–µ–Ω–∏, –±—ã–ª –ª–∏ –∑–≤–æ–Ω–æ–∫ —Ö–æ—Ä–æ—à–∏–º –∏–ª–∏ –Ω–µ—Ç. –£–∫–∞–∂–∏ –æ–¥–Ω—É –∫–ª—é—á–µ–≤—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–ª–∏ –æ–¥–Ω—É —Å–∏–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–æ.
                –ó–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
                üî¥/üü°/üü¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: [–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç]
                –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –ï—Å—Ç—å –æ—à–∏–±–∫–∏ üü°
                –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –û—à–∏–±–æ–∫ –Ω–µ—Ç üü¢
                –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –ï—Å—Ç—å –æ—à–∏–±–∫–∏ üî¥
                –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –û—à–∏–±–æ–∫ –Ω–µ—Ç üü¢
                üìÜ –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞: [–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è] {start_call}
                ‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã" –µ—Å–ª–∏ –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥] {duration}
                ‚úçÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ —Ä–æ–ª—è–º: [–ø–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞]
                üí° –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                ü¶æ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
                [–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º]
                ‚ùå –û—à–∏–±–∫–∏:
                [–ü–µ—Ä–µ—á–∏—Å–ª–∏ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è —Å–ª–µ–¥—É—é—â–∏–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑: "–ê–õ–õ–û", "–ù–µ –æ—Ç–≤–ª–µ–∫–∞—é?", "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã –∏ –º–µ–∂–¥–æ–º–µ—Ç–∏—è, "–ó–∞–Ω–∏–º–∞–µ–º—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏", "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"
                –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ—á—Ç—É, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å, –Ω–æ –∏–º–µ–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –≤ –±—É–¥—É—â–µ–º
                –ù–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
                –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ "–û—à–∏–±–æ–∫ –Ω–µ—Ç"]
                –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –ø–æ –æ–±—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
                –ù–µ –¥–∞–≤–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Ö–æ–¥—É –∑–≤–æ–Ω–∫–∞, —Ç–æ–ª—å–∫–æ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ.
                –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
                assistant - —ç—Ç–æ –ö–õ–ò–ï–ù–¢ (–µ–≥–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –±–æ—Ç), user - —ç—Ç–æ –°–û–¢–†–£–î–ù–ò–ö. –ù–ï –ü–£–¢–ê–ô. –í–°–ï–ì–î–ê –î–ò–ê–õ–û–ì –ù–ê–ß–ò–ù–ê–ï–¢ –°–û–¢–†–£–î–ù–ò–ö
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏ –¥–∞–π –æ—Ç—á–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏: {communication}
                        """
    }
    
    messages = [system_message]
    print('########################################################')
    print(messages)
    print('########################################################')
    async with aiohttp.ClientSession() as session:
        response_json = await send_request(session, messages)
        
    if response_json and 'choices' in response_json:
        return response_json['choices'][0]['message']['content']
    else:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

async def send_request(session, messages, max_retries=10, retry_delay=2, temperature=0.1):
    for attempt in range(max_retries):
        try:
            async with semaphore:
                async with session.post(
                    url="https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {API_KEY}",
                    },
                    json={
                        "model": "anthropic/claude-3.5-sonnet",
                        "messages": messages,
                        "provider": {"order": ["Anthropic"]},
                        "max_tokens": 200000,
                        "temperature": temperature,
                        "top_p": 0.5,
                        "top_k": 50,
                        "samplingParameters": {
                            "temperature": temperature,
                            "top_p": 0.5,
                            "top_k": 50
                        },
                    }
                ) as response:
                    if response.status == 200:
                        response_json = await response.json()
                        return response_json
                    else:
                        error_message = f"API request failed with status {response.status}: {response.reason}"
                        print(error_message)  # –ò–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –ª–æ–≥
        except Exception as e:
            print(f"Error in send_request: {str(e)}")  # –ò–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –ª–æ–≥

        if attempt == max_retries - 1:
            return None

        await asyncio.sleep(retry_delay)

    return None

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
#CORS(app, resources={r"/*": {"origins": "https://lliizzaa1.github.io"}}) #http://localhost:5000/
origins = [
    "http://127.0.0.1:5000",  #  <-  –ï—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    "https://lliizzaa1.github.io"  #  <- –î–æ–º–µ–Ω GitHub Pages 
]

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä CORS, —É–∫–∞–∑–∞–≤ origins
#cors = CORS(app, resources={r"/*": {"origins": origins}})
#cors = CORS(app, resources={r"/*": {"origins": "https://lliizzaa1.github.io"}})
#cors = CORS(app, resources={r"/*": {"origins": "https://lliizzaa1.github.io"}}, supports_credentials=True)
cors = CORS(app, resources={r"/*": {"origins": ["https://lliizzaa1.github.io"]}})

conversation_state = {
    "greeting_done": False,
    "product_mentioned": False,
    "price_mentioned": False,
    "closing_attempted": False
}

def get_conversation_filename(telegram_user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram."""
    os.makedirs('conversations', exist_ok=True)
    return os.path.join('conversations', f'{telegram_user_id}.json')

@app.route('/start_call', methods=['POST'])
def start_call():
    """ –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram User ID. 
        –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ. 
    """
    return jsonify({"message": "Call started"})

@app.route('/end_call', methods=['POST'])
def end_call():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user_id = session.pop('user_id', None)
    if not user_id:
        return jsonify({"message": "No active call"}), 400

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
    conversation_filename = get_conversation_filename(user_id)
    if os.path.exists(conversation_filename):
       os.remove(conversation_filename)

    return jsonify({"message": "Call ended"})

@app.route('/delete_conversation', methods=['POST'])
async def delete_conversation(): # –¥–æ–±–∞–≤–∏–ª–∞ async
    telegram_user_id = request.form.get('telegram_user_id')
    if not telegram_user_id:
        return jsonify({"error": "Telegram User ID is missing"}), 400

    conversation_filename = get_conversation_filename(telegram_user_id)
    with open(conversation_filename, 'r', encoding='utf-8') as f:
                conversation_history = json.load(f)
    print(conversation_history)
    conversation_history = format_conversation(conversation_history)
    conversation_history = await get_report(conversation_history)
    await send_end_call_message(bot=bot, user_id=telegram_user_id, text=conversation_history, duration=0)
    if os.path.exists(conversation_filename):
        os.remove(conversation_filename)
        return jsonify({"message": "Conversation deleted"}), 200
    else:
        return jsonify({"message": "Conversation not found"}), 404

@app.route('/test', methods=['GET'])
def test():
    logging.info("Test endpoint called")
    return jsonify({"message": "Server is working!"})

#@app.after_request
#def after_request(response):
#    response.headers.add('Access-Control-Allow-Origin', '*')
#    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
#    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
#    return response

def generate_audio(text):
  print("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—á—å...")
  tts = gTTS(text=text, lang='ru') 

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ –ø–∞–º—è—Ç–∏
  with io.BytesIO() as memory_buffer: 
    tts.write_to_fp(memory_buffer)
    memory_buffer.seek(0) 
    audio_data = memory_buffer.read()
  
  print("–†–µ—á—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
  return audio_data


@app.route('/recognize_speech', methods=['POST'])
async def handle_speech():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ 
       –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É—è Telegram User ID.
    """
    if 'audio' not in request.files:
        return jsonify({"error": "No audio file provided"}), 400

    audio_file = request.files['audio']
    telegram_user_id = request.form.get('telegram_user_id')  # –ü–æ–ª—É—á–∞–µ–º Telegram User ID –∏–∑ FormData
    request_id = int(request.form.get('requestId'))
    person_characteristics = request.form.get('characteristics')
    
    print("–ü–æ–ª—É—á–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:", person_characteristics) 

    if audio_file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    if not telegram_user_id:
        return jsonify({"error": "Telegram User ID is missing"}), 400

    if audio_file:
        user_speech = recognize_speech_from_file(audio_file)
        if user_speech is None:
            return jsonify({"error": "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"}), 500

        conversation_filename = get_conversation_filename(telegram_user_id)
        try:
            with open(conversation_filename, 'r', encoding='utf-8') as f:
                conversation_history = json.load(f)
        except FileNotFoundError:
            conversation_history = []

        conversation_history.append({"role": "user", "content": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:" + user_speech})

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
        bot_response = await get_response(conversation_history, person_characteristics)
        print('_______________________', bot_response)
        if bot_response.strip().upper() == "–°–ë–†–û–°":
            #  –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–≤–æ–Ω–∫–∞ 

            return jsonify({
                "user_speech": user_speech,
                "bot_response": "–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º.", #  –û—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                "audio_data": None,  #  –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª —Ç–∏—à–∏–Ω—ã
                "requestId": request_id,
                "callEnded": True  #  –§–ª–∞–≥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            }), 200 

        conversation_history.append({"role": "assistant", "content": '–±–æ—Ç-–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:'+ bot_response})

        with open(conversation_filename, 'w', encoding='utf-8') as f:
            json.dump(conversation_history, f, indent=4, ensure_ascii=False)

        audio_data = generate_audio(bot_response)
        audio_data_base64 = base64.b64encode(audio_data).decode('utf-8')

        response = make_response(jsonify({
            "user_speech": user_speech,
            "bot_response": bot_response,
            "audio_data": f"data:audio/wav;base64,{audio_data_base64}",
            "requestId": request_id 
        }))

        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type,Authorization'
        response.headers['Access-Control-Allow-Methods'] = 'GET,PUT,POST,DELETE,OPTIONS'
        #response.headers['Access-Control-Allow-Credentials'] = 'true'

        return response, 200

    return jsonify({"error": "Invalid file"}), 400

@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
